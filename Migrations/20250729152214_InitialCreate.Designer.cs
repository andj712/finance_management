// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using finance_management.Database;

#nullable disable

namespace finance_management.Migrations
{
    [DbContext(typeof(PfmDbContext))]
    [Migration("20250729152214_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("finance_management.Models.Category", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("Relational:JsonPropertyName", "parent-code");

                    b.HasKey("Code");

                    b.HasIndex("ParentCode");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("finance_management.Models.Split", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("character varying(15)")
                        .HasColumnOrder(0);

                    b.Property<string>("CatCode")
                        .HasColumnType("character varying(10)")
                        .HasColumnOrder(1);

                    b.Property<double>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision");

                    b.HasKey("TransactionId", "CatCode");

                    b.HasIndex("CatCode");

                    b.ToTable("Splits");
                });

            modelBuilder.Entity("finance_management.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<double>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CatCode")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MccCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CatCode");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("finance_management.Models.Category", b =>
                {
                    b.HasOne("finance_management.Models.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("finance_management.Models.Split", b =>
                {
                    b.HasOne("finance_management.Models.Category", "Category")
                        .WithMany("Splits")
                        .HasForeignKey("CatCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("finance_management.Models.Transaction", "Transaction")
                        .WithMany("Splits")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("finance_management.Models.Transaction", b =>
                {
                    b.HasOne("finance_management.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CatCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("finance_management.Models.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Splits");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("finance_management.Models.Transaction", b =>
                {
                    b.Navigation("Splits");
                });
#pragma warning restore 612, 618
        }
    }
}
